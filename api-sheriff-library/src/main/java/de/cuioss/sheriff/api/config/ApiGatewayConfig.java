/*
 * Copyright 2025 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuioss.sheriff.api.config;

import static de.cuioss.tools.base.Preconditions.checkArgument;

import java.time.Duration;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;

/**
 * Configuration class for API Gateway functionality.
 * This class contains all necessary configuration parameters for the API Sheriff.
 *
 * <h2>Usage Example:</h2>
 * <pre>
 * {@code
 * ApiGatewayConfig config = ApiGatewayConfig.builder()
 *     .rateLimit(100)
 *     .timeWindow(Duration.ofMinutes(1).toMillis())
 *     .requestTimeout(Duration.ofSeconds(30).toMillis())
 *     .enableCors(true)
 *     .build();
 * }
 * </pre>
 *
 * @author API Sheriff Team
 */
@Getter
@ToString
@EqualsAndHashCode
public class ApiGatewayConfig {

    /** Default rate limit per client */
    private static final int DEFAULT_RATE_LIMIT = 100;

    /** Default time window in milliseconds (1 minute) */
    private static final long DEFAULT_TIME_WINDOW = Duration.ofMinutes(1).toMillis();

    /** Default request timeout in milliseconds (30 seconds) */
    private static final long DEFAULT_REQUEST_TIMEOUT = Duration.ofSeconds(30).toMillis();

    /**
     * Maximum number of requests allowed per client within the time window.
     * Must be greater than 0.
     */
    private final int rateLimit;

    /**
     * Time window in milliseconds for rate limiting calculations.
     * Must be greater than 0.
     */
    private final long timeWindow;

    /**
     * Request timeout in milliseconds.
     * Must be greater than 0.
     */
    private final long requestTimeout;

    /**
     * Whether CORS (Cross-Origin Resource Sharing) is enabled.
     */
    private final boolean corsEnabled;

    /**
     * Additional custom properties for extending the configuration.
     * This map is thread-safe and can be used to store custom configuration values.
     */
    private final Map<String, Object> customProperties;

    /**
     * Constructor for ApiGatewayConfig.
     *
     * @param rateLimit the rate limit per client
     * @param timeWindow the time window in milliseconds
     * @param requestTimeout the request timeout in milliseconds
     * @param corsEnabled whether CORS is enabled
     * @param customProperties additional custom properties
     */
    public ApiGatewayConfig(int rateLimit, long timeWindow, long requestTimeout,
                           boolean corsEnabled, Map<String, Object> customProperties) {
        this.rateLimit = rateLimit;
        this.timeWindow = timeWindow;
        this.requestTimeout = requestTimeout;
        this.corsEnabled = corsEnabled;
        this.customProperties = customProperties != null ?
            new ConcurrentHashMap<>(customProperties) : new ConcurrentHashMap<>();
    }

    /**
     * Creates a new builder instance.
     *
     * @return a new ApiGatewayConfigBuilder instance
     */
    public static ApiGatewayConfigBuilder builder() {
        return new ApiGatewayConfigBuilder();
    }

    /**
     * Creates a builder pre-populated with the values from this instance.
     *
     * @return a new ApiGatewayConfigBuilder instance with current values
     */
    public ApiGatewayConfigBuilder toBuilder() {
        return new ApiGatewayConfigBuilder()
            .rateLimit(this.rateLimit)
            .timeWindow(this.timeWindow)
            .requestTimeout(this.requestTimeout)
            .corsEnabled(this.corsEnabled)
            .customProperties(this.customProperties);
    }

    /**
     * Validates the configuration parameters.
     * This method is called automatically during object construction when using the builder.
     *
     * @throws IllegalArgumentException if any configuration parameter is invalid
     */
    private void validate() {
        checkArgument(rateLimit > 0, "Rate limit must be greater than 0, but was: %s", rateLimit);
        checkArgument(timeWindow > 0, "Time window must be greater than 0, but was: %s", timeWindow);
        checkArgument(requestTimeout > 0, "Request timeout must be greater than 0, but was: %s", requestTimeout);
    }

    /**
     * Custom builder to add validation during object construction.
     */
    public static class ApiGatewayConfigBuilder {

        // Builder fields - these are normally generated by Lombok but we need them for custom methods
        private int rateLimit = DEFAULT_RATE_LIMIT;
        private long timeWindow = DEFAULT_TIME_WINDOW;
        private long requestTimeout = DEFAULT_REQUEST_TIMEOUT;
        private boolean corsEnabled = false;
        private Map<String, Object> customProperties;

        /**
         * Sets the rate limit.
         *
         * @param rateLimit the rate limit
         * @return this builder instance
         */
        public ApiGatewayConfigBuilder rateLimit(int rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }

        /**
         * Sets the time window.
         *
         * @param timeWindow the time window in milliseconds
         * @return this builder instance
         */
        public ApiGatewayConfigBuilder timeWindow(long timeWindow) {
            this.timeWindow = timeWindow;
            return this;
        }

        /**
         * Sets the time window using a Duration.
         *
         * @param duration the time window as Duration, must not be null
         * @return this builder instance
         * @throws IllegalArgumentException if duration is null
         */
        public ApiGatewayConfigBuilder timeWindow(Duration duration) {
            checkArgument(null != duration, "Duration must not be null");
            this.timeWindow = duration.toMillis();
            return this;
        }

        /**
         * Sets the request timeout.
         *
         * @param requestTimeout the request timeout in milliseconds
         * @return this builder instance
         */
        public ApiGatewayConfigBuilder requestTimeout(long requestTimeout) {
            this.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * Sets the request timeout using a Duration.
         *
         * @param duration the request timeout as Duration, must not be null
         * @return this builder instance
         * @throws IllegalArgumentException if duration is null
         */
        public ApiGatewayConfigBuilder requestTimeout(Duration duration) {
            checkArgument(null != duration, "Duration must not be null");
            this.requestTimeout = duration.toMillis();
            return this;
        }

        /**
         * Sets whether CORS is enabled.
         *
         * @param corsEnabled true to enable CORS, false to disable
         * @return this builder instance
         */
        public ApiGatewayConfigBuilder corsEnabled(boolean corsEnabled) {
            this.corsEnabled = corsEnabled;
            return this;
        }

        /**
         * Adds a custom property to the configuration.
         *
         * @param key the property key, must not be null or empty
         * @param value the property value, must not be null
         * @return this builder instance
         * @throws IllegalArgumentException if key is null/empty or value is null
         */
        public ApiGatewayConfigBuilder customProperty(String key, Object value) {
            checkArgument(null != key && !key.trim().isEmpty(), "Property key must not be null or empty");
            checkArgument(null != value, "Property value must not be null");
            if (this.customProperties == null) {
                this.customProperties = new ConcurrentHashMap<>();
            }
            this.customProperties.put(key, value);
            return this;
        }

        /**
         * Sets the custom properties map.
         *
         * @param customProperties the custom properties map
         * @return this builder instance
         */
        public ApiGatewayConfigBuilder customProperties(Map<String, Object> customProperties) {
            this.customProperties = customProperties;
            return this;
        }

        /**
         * Builds and validates the ApiGatewayConfig instance.
         *
         * @return a new ApiGatewayConfig instance
         * @throws IllegalArgumentException if any configuration parameter is invalid
         */
        public ApiGatewayConfig build() {
            ApiGatewayConfig config = new ApiGatewayConfig(
                rateLimit, timeWindow, requestTimeout, corsEnabled,
                customProperties != null ? customProperties : new ConcurrentHashMap<>()
            );
            config.validate();
            return config;
        }
    }

    /**
     * Gets a read-only view of the custom properties.
     *
     * @return unmodifiable map of custom properties
     */
    public Map<String, Object> getCustomProperties() {
        return Collections.unmodifiableMap(customProperties);
    }

    /**
     * Gets a custom property value by key.
     *
     * @param key the property key, must not be null
     * @return the property value, or null if not found
     * @throws IllegalArgumentException if key is null
     */
    public Object getCustomProperty(String key) {
        checkArgument(null != key, "Property key must not be null");
        return customProperties.get(key);
    }

    /**
     * Gets a custom property value by key with a default value.
     *
     * @param key the property key, must not be null
     * @param defaultValue the default value to return if property is not found
     * @return the property value, or defaultValue if not found
     * @throws IllegalArgumentException if key is null
     */
    public Object getCustomProperty(String key, Object defaultValue) {
        checkArgument(null != key, "Property key must not be null");
        return customProperties.getOrDefault(key, defaultValue);
    }
}